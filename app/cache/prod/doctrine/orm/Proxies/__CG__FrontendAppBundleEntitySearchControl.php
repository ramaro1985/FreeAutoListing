<?php

namespace Proxies\__CG__\Frontend\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class SearchControl extends \Frontend\AppBundle\Entity\SearchControl implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'country', 'countrySlug', 'stateProvince', 'stateProvinceSlug', 'locality', 'localitySlug', 'serial', 'IP', 'count');
        }

        return array('__isInitialized__', 'id', 'country', 'countrySlug', 'stateProvince', 'stateProvinceSlug', 'locality', 'localitySlug', 'serial', 'IP', 'count');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (SearchControl $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountry($country)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountry', array($country));

        return parent::setCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountry', array());

        return parent::getCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountrySlug($countrySlug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountrySlug', array($countrySlug));

        return parent::setCountrySlug($countrySlug);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountrySlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountrySlug', array());

        return parent::getCountrySlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setStateProvince($stateProvince)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStateProvince', array($stateProvince));

        return parent::setStateProvince($stateProvince);
    }

    /**
     * {@inheritDoc}
     */
    public function getStateProvince()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStateProvince', array());

        return parent::getStateProvince();
    }

    /**
     * {@inheritDoc}
     */
    public function setStateProvinceSlug($stateProvinceSlug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStateProvinceSlug', array($stateProvinceSlug));

        return parent::setStateProvinceSlug($stateProvinceSlug);
    }

    /**
     * {@inheritDoc}
     */
    public function getStateProvinceSlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStateProvinceSlug', array());

        return parent::getStateProvinceSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocality($city)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocality', array($city));

        return parent::setLocality($city);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocality()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocality', array());

        return parent::getLocality();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocalitySlug($citySlug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocalitySlug', array($citySlug));

        return parent::setLocalitySlug($citySlug);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocalitySlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocalitySlug', array());

        return parent::getLocalitySlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setSerial($serial)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSerial', array($serial));

        return parent::setSerial($serial);
    }

    /**
     * {@inheritDoc}
     */
    public function getSerial()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSerial', array());

        return parent::getSerial();
    }

    /**
     * {@inheritDoc}
     */
    public function setIp($ip)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIp', array($ip));

        return parent::setIp($ip);
    }

    /**
     * {@inheritDoc}
     */
    public function getIp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIp', array());

        return parent::getIp();
    }

    /**
     * {@inheritDoc}
     */
    public function setCount($count)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCount', array($count));

        return parent::setCount($count);
    }

    /**
     * {@inheritDoc}
     */
    public function getCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCount', array());

        return parent::getCount();
    }

}
