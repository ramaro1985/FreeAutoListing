<?php

namespace Frontend\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use \DateTime;

/**
 * VehicleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VehicleRepository extends EntityRepository
{
    public function filterProperties($filtro)
    {

        $dealer = $filtro['dealer'];
        $user = $filtro['user'];
        $year = $filtro['year'];
        $make = $filtro['make'];
        $sort = $filtro['sort'];

        $actual = new DateTime();
        $now = date_format($actual, 'Y-m-d');


        $qb = $this->createQueryBuilder('v');
        $qb->select('v');

        if (isset($dealer) && $dealer != '') {
            $qb->join('v.profile', 'p');
            $qb->andWhere('p.serie = :serie');
            $qb->setParameter('serie', $dealer);
        }

        if (isset($user) && $user != '') {
            $qb->join('v.user', 'u');
            $qb->andWhere('u.id = :user_id');
            $qb->setParameter('user_id', $user);
        }

        $qb->join('v.vehiclesinformation', 'vi');
        $qb->join('v.vehiclesdetails', 'vd');

        if (isset($year) && $year != '' && $year != 0) {
            $qb->join('vi.year', 'y');
            $qb->andWhere('y.id = :year_id');
            $qb->setParameter('year_id', $year);
        }

        if (isset($make) && $make != '' && $make != "all") {
            $qb->join('vi.make', 'make');
            if (is_numeric($make)) {
                $qb->andWhere('make.id = :make_id');
                $qb->setParameter('make_id', $make);
            } else {
                $qb->andWhere('make.makeDisplay = :make_display');
                $qb->setParameter('make_display', $make);
            }

        }

        $qb->andWhere('v.full = :full');
        $qb->setParameter('full', 1);

        $sorting = ($sort == 0) ? 'DESC' : 'ASC';

        $qb->orderBy('v.dateCreated', $sorting);
        $query = $qb->getQuery();

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }

    public function FilterSimilarModels($filtro, $no_include)
    {
        $year = $filtro['year'];
        $make = $filtro['make'];
        $model = $filtro['model'];
        $current = $filtro['current_id'];

        $qb = $this->createQueryBuilder('v');
        $qb->select('v, vi, vd');

        $qb->where("v.id != :current");
        $qb->setParameter('current', $current);

        $qb->join('v.vehiclesinformation', 'vi');
        $qb->join('v.vehiclesdetails', 'vd');

        if (isset($make) && $make != '' && $make != 0) {
            $qb->join('vi.make', 'make');
            $qb->andWhere('make.id = :make_id');
            $qb->setParameter('make_id', $make);
        }

        if (isset($model) && $model != '' && $model != 0) {
            $qb->join('vi.model', 'model');
            $qb->andWhere('model.id = :model_id');
            $qb->setParameter('model_id', $model);
        }

        if (isset($year) && $year != '' && $year != 0) {
            $qb->join('vi.year', 'y');
            $qb->andWhere('y.id = :year_id');
            $qb->setParameter('year_id', $year);
        }

        $aux = 1;
        foreach ($no_include as $vehicle_id) {
            $qb->andWhere("v.id != :current_" . $aux);
            $qb->setParameter('current_' . $aux, $vehicle_id);
            $aux++;
        }

        $qb->andWhere('v.full = :full');
        $qb->setParameter('full', 1);

        $qb->setMaxResults(3);
        $qb->distinct(true);
        $query = $qb->getQuery();

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function SearchCarsResults($filtro)
    {

        $year = $filtro['year'];
        $make = $filtro['make'];
        $model = $filtro['model'];
        $zipcode = $filtro['zipcode'];
        $sort = $filtro['sort'];

        $actual = new DateTime();
        $now = date_format($actual, 'M d, Y - h:i a');

        $qb = $this->createQueryBuilder('v');
        $qb->select('v');

        $qb->join('v.vehiclesinformation', 'vi');
        $qb->join('v.vehiclesdetails', 'vd');

        if (isset($year) && $year != '' && $year != 'all') {
            $qb->join('vi.year', 'y');
            $qb->andWhere('y.id = :year_id');
            $qb->setParameter('year_id', $year);
        }

        if (isset($make) && $make != '' && $make != 'all') {
            $qb->join('vi.make', 'make');
            $qb->andWhere('make.makeId = :make_id');
            $qb->setParameter('make_id', $make);
        }

        if (isset($model) && $model != '' && $model != 'all') {
            $qb->join('vi.model', 'model');
            $qb->andWhere('model.modelId = :model_id');
            $qb->setParameter('model_id', $model);
        }

        if (isset($zipcode) && $zipcode != '' && $zipcode != 'all') {
            $qb->andWhere('vi.zipcode = :zipcode');
            $qb->setParameter('zipcode', $zipcode);
        }

        $qb->andWhere('v.full = :full');
        $qb->setParameter('full', 1);

        $sorting = ($sort == 0) ? 'DESC' : 'ASC';

        $qb->orderBy('v.dateCreated', $sorting);
        $query = $qb->getQuery();

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function filterCarResult($filtro)
    {

        $sort = $filtro['sort'];


        $qb = $this->createQueryBuilder('v');
        $qb->select('v');

        $qb->join('v.vehiclesinformation', 'vi');
        $qb->join('v.vehiclesdetails', 'vd');

        $qb->andWhere('v.full = :full');
        $qb->setParameter('full', 1);

        switch ($sort) {
            case 0:
                /*Este es para cuando no pasa ningun parametro ALL*/
                $sorting = 'DESC';
                $qb->orderBy('v.dateCreated', $sorting);
                break;
            case 1:
                /*Este es price Hight*/
                $sorting = 'DESC';
                $qb->orderBy('vi.price', $sorting);
                break;
            case 2:
                /*Este es price Low*/
                $sorting = 'ASC';
                $qb->orderBy('vi.price', $sorting);
                break;
            case 3:
                /*Este es milage Higth*/
                $sorting = 'DESC';
                $qb->orderBy('vi.mileage', $sorting);
                break;
            case 4:
                /*Este es milage Low*/
                $sorting = 'ASC';
                $qb->orderBy('vi.mileage', $sorting);
                break;
            case 5:
                /*Este es year new*/
                $sorting = 'ASC';
                $qb->join('vi.year', 'year');
                $qb->orderBy('year.year', $sorting);
                break;
            case 6:
                /*Este es year old*/
                $sorting = 'DESC';
                $qb->join('vi.year', 'year');
                $qb->orderBy('year.year', $sorting);
                break;
            case 7:
                /*Este es make A-Z*/
                $sorting = 'ASC';
                $qb->join('vi.make', 'make');
                $qb->orderBy('make.makeDisplay', $sorting);
                break;
            case 8:
                /*Este es make Z-A*/
                $sorting = 'DESC';
                $qb->join('vi.make', 'make');
                $qb->orderBy('make.makeDisplay', $sorting);
                break;
            case 9:
                /*Este es model A-Z*/
                $sorting = 'ASC';
                $qb->join('vi.model', 'model');
                $qb->orderBy('model.modelDisplay', $sorting);
                break;
            case 10:
                /*Este es model Z-A*/
                $sorting = 'DESC';
                $qb->join('vi.model', 'model');
                $qb->orderBy('moldel.modelDisplay', $sorting);
                break;
        }

        $query = $qb->getQuery();

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function SearchCarsAllFiltersResults($filtro)
    {
        $years = $filtro['year'];
        $makes = $filtro['make'];
        $models = $filtro['model'];
        $zipcodes = $filtro['zipcode'];
        $sort = $filtro['sort'];
        $conditions = $filtro['condition'];
        $bodystyles = $filtro['bodystyle'];
        $transmissions = $filtro['transmission'];
        $fuels = $filtro['fuel'];
        $doorss = $filtro['doors'];
        $drives = $filtro['drive'];
        $engines = $filtro['engine'];
        $trims = $filtro['trim'];
        $prices = $filtro['prices'];
        $privates = $filtro['private'];
        $mileages = $filtro['mileage'];
        $interiorcolor = $filtro['interiorcolor'];
        $exteriorcolor = $filtro['exteriorcolor'];
        $profileserie = $filtro['profileserie'];

        $actual = new DateTime();
        $now = date_format($actual, 'M d, Y - h:i a');

        $qb = $this->createQueryBuilder('v');
        $qb->select('v');

        $qb->join('v.vehiclesinformation', 'vi');
        $qb->join('v.vehiclesdetails', 'vd');
        if(isset($profileserie) && $profileserie != "" )
            $qb->join('v.profile', 'vp');

        if (isset($years) && count($years) > 0) {
            $qb->join('vi.year', 'y');

            $minyear = $years[0];
            $maxyear = $years[1];

            $qb->andWhere('y.year >= :minyear');
            $qb->setParameter('minyear', $minyear);
            $qb->andWhere('y.year <= :maxyear');
            $qb->setParameter('maxyear', $maxyear);
        }

        if (isset($makes) && count($makes) > 0) {
            $qb->join('vi.make', 'm');
            $aux = 1;
            foreach ($makes as $make) {
                if ($make != "All") {
                    if ($aux == 1)
                        $qb->andWhere('m.makeDisplay = :makeDisplay' . $aux);
                    else
                        $qb->orWhere('m.makeDisplay = :makeDisplay' . $aux);
                    $qb->setParameter('makeDisplay' . $aux, $make);
                    $aux++;
                }
            }
        }

        if (isset($models) && count($models) > 0) {
            $qb->join('vi.model', 'mo');
            $aux = 1;
            foreach ($models as $model) {
                if ($model != "All") {
                    if ($aux == 1)
                        $qb->andWhere('mo.modelId = :modelId' . $aux);
                    else
                        $qb->orWhere('mo.modelId = :modelId' . $aux);
                    $qb->setParameter('modelId' . $aux, $model);
                    $aux++;
                }
            }
        }

        if (isset($zipcodes) && count($zipcodes) > 0) {
            $aux = 1;
            foreach ($zipcodes as $zipcode) {
                if ($zipcode != "All") {
                    if ($aux == 1)
                        $qb->andWhere('v.zipcode = :zipcode' . $aux);
                    else
                        $qb->orWhere('v.zipcode = :zipcode' . $aux);
                    $qb->setParameter('zipcode' . $aux, $zipcode);
                    $aux++;
                }
            }
        }
        if (isset($conditions) && count($conditions) > 0) {
            $qb->join('vi.condition', 'c');
            $aux = 1;
            foreach ($conditions as $condition) {
                if ($condition != "All") {
                    if ($aux == 1) {
                        $qb->andWhere('c.name = :condition' . $aux);
                        $qb->setParameter('condition' . $aux, $condition);
                    } else {
                        $qb->orWhere('c.name = :condition' . $aux);
                        $qb->setParameter('condition' . $aux, $condition);
                    }

                    $aux++;
                }
            }
        }
        if (isset($bodystyles) && count($bodystyles) > 0) {
            $qb->join('vi.bodyStyle', 'bd');
            $aux = 1;
            foreach ($bodystyles as $bodystyle) {
                if ($bodystyle != "All") {
                    if ($aux == 1) {
                        $qb->andWhere('bd.name = :bodystyle' . $aux);
                        $qb->setParameter('bodystyle' . $aux, $bodystyle);
                    } else {
                        $qb->orWhere('bd.name = :bodystyle' . $aux);
                        $qb->setParameter('bodystyle' . $aux, $bodystyle);
                    }
                    $aux++;
                }
            }
        }
        if (isset($interiorcolor) && count($interiorcolor) > 0) {
            $qb->join('vd.interiorcolor', 'ic');
            $aux = 1;
            foreach ($interiorcolor as $color) {
                if ($color != "All") {
                    if ($aux == 1) {
                        $qb->andWhere('ic.colorname = :color' . $aux);
                        $qb->setParameter('color' . $aux, $color);
                    } else {
                        $qb->orWhere('ic.colorname = :color' . $aux);
                        $qb->setParameter('color' . $aux, $color);
                    }
                    $aux++;
                }
            }
        }
        if (isset($exteriorcolor) && count($exteriorcolor) > 0) {
            $qb->join('vd.exteriorcolor', 'ec');
            $aux = 1;
            foreach ($exteriorcolor as $color) {
                if ($color != "All") {
                    if ($aux == 1) {
                        $qb->andWhere('ec.colorname = :color' . $aux);
                        $qb->setParameter('color' . $aux, $color);
                    } else {
                        $qb->orWhere('ec.colorname = :color' . $aux);
                        $qb->setParameter('color' . $aux, $color);
                    }
                    $aux++;
                }
            }
        }
        if (isset($transmissions) && count($transmissions) > 0) {
            $qb->join('vd.transmission', 'tr');
            $aux = 1;
            foreach ($transmissions as $transmission) {
                if ($transmission != "All") {
                    if ($aux == 1) {
                        $qb->andWhere('tr.name = :transmission' . $aux);
                        $qb->setParameter('transmission' . $aux, $transmission);
                    } else {
                        $qb->orWhere('tr.name = :transmission' . $aux);
                        $qb->setParameter('transmission' . $aux, $transmission);
                    }

                    $aux++;
                }
            }
        }
        if (isset($mileages) && count($mileages) > 0) {
            if ($mileages[0] != 'All') {
                $status = $mileages[0];
                $value = $mileages[1];
                $value = str_replace(",", "", $value);
                $oper = (strtolower($status) == "under") ? '<=' : '>';
                $qb->andWhere('vi.mileage ' . $oper . ' :mileage');
                $qb->setParameter('mileage', $value);
            }

        }
        if (isset($fuels) && count($fuels) > 0) {
            $qb->join('vd.fueltype', 'fu');
            $aux = 1;
            foreach ($fuels as $fuel) {
                if ($fuel != "All") {
                    if ($aux == 1) {
                        $qb->andWhere('fu.name = :fuel' . $aux);
                        $qb->setParameter('fuel' . $aux, $fuel);
                    } else {
                        $qb->orWhere('fu.name = :fuel' . $aux);
                        $qb->setParameter('fuel' . $aux, $fuel);
                    }

                    $aux++;
                }
            }
        }
        if (isset($doorss) && count($doorss) > 0) {
            $qb->join('vd.doors', 'do');
            $aux = 1;
            foreach ($doorss as $doors) {
                if ($doors != "All") {
                    if ($aux == 1) {
                        $qb->andWhere('do.name = :doors' . $aux);
                        $qb->setParameter('doors' . $aux, $doors);
                    } else {
                        $qb->orWhere('do.name = :doors' . $aux);
                        $qb->setParameter('doors' . $aux, $doors);
                    }

                    $aux++;
                }
            }
        }
        if (isset($drives) && count($drives) > 0) {
            $qb->join('vd.drive', 'dr');
            $aux = 1;
            foreach ($drives as $drive) {
                if ($drive != "All") {
                    if ($aux == 1) {
                        $qb->andWhere('dr.name = :drive' . $aux);
                        $qb->setParameter('drive' . $aux, $drive);
                    } else {
                        $qb->orWhere('dr.name = :drive' . $aux);
                        $qb->setParameter('drive' . $aux, $drive);
                    }

                    $aux++;
                }
            }
        }
        if (isset($engines) && count($engines) > 0) {
            $qb->join('vd.enginetype', 'en');
            $aux = 1;
            foreach ($engines as $engine) {
                if ($engine != "All") {
                    if ($aux == 1) {
                        $qb->andWhere('en.name = :engine' . $aux);
                        $qb->setParameter('engine' . $aux, $engine);
                    } else {
                        $qb->orWhere('en.name = :engine' . $aux);
                        $qb->setParameter('engine' . $aux, $engine);
                    }

                    $aux++;
                }
            }
        }
        if (isset($trims) && count($trims) > 0) {
            $qb->join('vd.trim', 'trim');
            $aux = 1;
            foreach ($trims as $trim) {
                /* if(is_numeric($trim)){
                     if ($trim != "All") {
                         if ($aux == 1) {
                             $qb->andWhere('trim.id = :id' . $aux);
                             $qb->setParameter('id' . $aux, $trim);
                         } else {
                             $qb->orWhere('trim.id = :id' . $aux);
                             $qb->setParameter('id' . $aux, $trim);
                         }

                         $aux++;
                     }*/
                //  }else{
                if ($trim != "All") {
                    if ($aux == 1) {
                        $qb->andWhere('trim.trimId = :id' . $aux);
                        $qb->setParameter('id' . $aux, $trim);
                    } else {
                        $qb->orWhere('trim.trimId = :id' . $aux);
                        $qb->setParameter('id' . $aux, $trim);
                    }

                    $aux++;
                }
                // }

            }
        }
        if (isset($privates) && count($privates) > 0) {
            $aux = 1;
            foreach ($privates as $private) {
                if ($private != "All") {
                    if ($aux == 1) {
                        if ($private == 'Dealers') {
                            $qb->andWhere('v.profile is not null');
                        } else {
                            $qb->andWhere('v.user is not null');
                        }

                    } else {
                        if ($private == 'Dealers') {
                            $qb->orWhere('v.profile is not null');
                        } else {
                            $qb->orWhere('v.user is not null');
                        }
                    }

                    $aux++;
                }
            }
        }
        if (isset($prices) && count($prices) > 0) {
            $minprice = $prices[0];
            $maxprice = $prices[1];

            $qb->andWhere('vi.price >= :minPrice');
            $qb->setParameter('minPrice', $minprice);
            $qb->andWhere('vi.price <= :maxPrice');
            $qb->setParameter('maxPrice', $maxprice);
        }

        switch ($sort) {
            case 0:
                /*Este es para cuando no pasa ningun parametro ALL*/
                $sorting = 'DESC';
                $qb->orderBy('v.dateCreated', $sorting);
                break;
            case 1:
                /*Este es price Hight*/
                $sorting = 'DESC';
                $qb->orderBy('vi.price', $sorting);
                break;
            case 2:
                /*Este es price Low*/
                $sorting = 'ASC';
                $qb->orderBy('vi.price', $sorting);
                break;
            case 3:
                /*Este es milage Higth*/
                $sorting = 'DESC';
                $qb->orderBy('vi.mileage', $sorting);
                break;
            case 4:
                /*Este es milage Low*/
                $sorting = 'ASC';
                $qb->orderBy('vi.mileage', $sorting);
                break;
            case 5:
                /*Este es year new*/
                $sorting = 'ASC';
                $qb->join('vi.year', 'year');
                $qb->orderBy('year.year', $sorting);
                break;
            case 6:
                /*Este es year old*/
                $sorting = 'DESC';
                $qb->join('vi.year', 'year');
                $qb->orderBy('year.year', $sorting);
                break;
            case 7:
                /*Este es make A-Z*/
                $sorting = 'ASC';
                $qb->join('vi.make', 'make');
                $qb->orderBy('make.makeDisplay', $sorting);
                break;
            case 8:
                /*Este es make Z-A*/
                $sorting = 'DESC';
                $qb->join('vi.make', 'make');
                $qb->orderBy('make.makeDisplay', $sorting);
                break;
            case 9:
                /*Este es model A-Z*/
                $sorting = 'ASC';
                $qb->join('vi.model', 'model');
                $qb->orderBy('model.modelDisplay', $sorting);
                break;
            case 10:
                /*Este es model Z-A*/
                $sorting = 'DESC';
                $qb->join('vi.model', 'model');
                $qb->orderBy('moldel.modelDisplay', $sorting);
                break;
        }

        $qb->andwhere('v.full = :full');
        $qb->setParameter('full', 1);

        if(isset($profileserie) && $profileserie != "" )
        {
            $qb->andWhere('vp.serie >= :serie');
            $qb->setParameter('serie', $profileserie);
        }

        $query = $qb->getQuery();

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

}
